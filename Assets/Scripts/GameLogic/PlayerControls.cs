//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/GameLogic/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""b9e3000b-9580-4c48-a09a-46cc610b555c"",
            ""actions"": [
                {
                    ""name"": ""MapAction"",
                    ""type"": ""Button"",
                    ""id"": ""bf9e302a-5ed5-443f-961f-b76d06048027"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DestinationAction"",
                    ""type"": ""Button"",
                    ""id"": ""5165e87e-ca80-4287-a581-d778a12b3e6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VendorAction"",
                    ""type"": ""Button"",
                    ""id"": ""c77ba536-ba37-4720-b6c2-7ad2bf48b941"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeftAction"",
                    ""type"": ""Button"",
                    ""id"": ""8371a986-0878-40f9-9a38-9abd7b2e4666"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRightAction"",
                    ""type"": ""Button"",
                    ""id"": ""e97ccd1b-c26e-42ee-a29b-c9ea259785cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MirrorAction"",
                    ""type"": ""Button"",
                    ""id"": ""de9add74-0f6a-465b-9efe-c982236e6eef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76abf253-d507-4f8b-b55e-afe144e533ee"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1deb3c13-b191-4808-b698-e8e0042da519"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DestinationAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e524889a-a7e9-4169-9d4b-7892ec7a392e"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VendorAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3752a89d-d7cc-412e-9ba3-1c84d96ceb3a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeftAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45551e56-a748-4cc1-870f-561828727c16"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRightAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""117cf013-f048-45dd-8c0e-e22892829d44"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MirrorAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_MapAction = m_PlayerActionMap.FindAction("MapAction", throwIfNotFound: true);
        m_PlayerActionMap_DestinationAction = m_PlayerActionMap.FindAction("DestinationAction", throwIfNotFound: true);
        m_PlayerActionMap_VendorAction = m_PlayerActionMap.FindAction("VendorAction", throwIfNotFound: true);
        m_PlayerActionMap_RotateLeftAction = m_PlayerActionMap.FindAction("RotateLeftAction", throwIfNotFound: true);
        m_PlayerActionMap_RotateRightAction = m_PlayerActionMap.FindAction("RotateRightAction", throwIfNotFound: true);
        m_PlayerActionMap_MirrorAction = m_PlayerActionMap.FindAction("MirrorAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private List<IPlayerActionMapActions> m_PlayerActionMapActionsCallbackInterfaces = new List<IPlayerActionMapActions>();
    private readonly InputAction m_PlayerActionMap_MapAction;
    private readonly InputAction m_PlayerActionMap_DestinationAction;
    private readonly InputAction m_PlayerActionMap_VendorAction;
    private readonly InputAction m_PlayerActionMap_RotateLeftAction;
    private readonly InputAction m_PlayerActionMap_RotateRightAction;
    private readonly InputAction m_PlayerActionMap_MirrorAction;
    public struct PlayerActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MapAction => m_Wrapper.m_PlayerActionMap_MapAction;
        public InputAction @DestinationAction => m_Wrapper.m_PlayerActionMap_DestinationAction;
        public InputAction @VendorAction => m_Wrapper.m_PlayerActionMap_VendorAction;
        public InputAction @RotateLeftAction => m_Wrapper.m_PlayerActionMap_RotateLeftAction;
        public InputAction @RotateRightAction => m_Wrapper.m_PlayerActionMap_RotateRightAction;
        public InputAction @MirrorAction => m_Wrapper.m_PlayerActionMap_MirrorAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Add(instance);
            @MapAction.started += instance.OnMapAction;
            @MapAction.performed += instance.OnMapAction;
            @MapAction.canceled += instance.OnMapAction;
            @DestinationAction.started += instance.OnDestinationAction;
            @DestinationAction.performed += instance.OnDestinationAction;
            @DestinationAction.canceled += instance.OnDestinationAction;
            @VendorAction.started += instance.OnVendorAction;
            @VendorAction.performed += instance.OnVendorAction;
            @VendorAction.canceled += instance.OnVendorAction;
            @RotateLeftAction.started += instance.OnRotateLeftAction;
            @RotateLeftAction.performed += instance.OnRotateLeftAction;
            @RotateLeftAction.canceled += instance.OnRotateLeftAction;
            @RotateRightAction.started += instance.OnRotateRightAction;
            @RotateRightAction.performed += instance.OnRotateRightAction;
            @RotateRightAction.canceled += instance.OnRotateRightAction;
            @MirrorAction.started += instance.OnMirrorAction;
            @MirrorAction.performed += instance.OnMirrorAction;
            @MirrorAction.canceled += instance.OnMirrorAction;
        }

        private void UnregisterCallbacks(IPlayerActionMapActions instance)
        {
            @MapAction.started -= instance.OnMapAction;
            @MapAction.performed -= instance.OnMapAction;
            @MapAction.canceled -= instance.OnMapAction;
            @DestinationAction.started -= instance.OnDestinationAction;
            @DestinationAction.performed -= instance.OnDestinationAction;
            @DestinationAction.canceled -= instance.OnDestinationAction;
            @VendorAction.started -= instance.OnVendorAction;
            @VendorAction.performed -= instance.OnVendorAction;
            @VendorAction.canceled -= instance.OnVendorAction;
            @RotateLeftAction.started -= instance.OnRotateLeftAction;
            @RotateLeftAction.performed -= instance.OnRotateLeftAction;
            @RotateLeftAction.canceled -= instance.OnRotateLeftAction;
            @RotateRightAction.started -= instance.OnRotateRightAction;
            @RotateRightAction.performed -= instance.OnRotateRightAction;
            @RotateRightAction.canceled -= instance.OnRotateRightAction;
            @MirrorAction.started -= instance.OnMirrorAction;
            @MirrorAction.performed -= instance.OnMirrorAction;
            @MirrorAction.canceled -= instance.OnMirrorAction;
        }

        public void RemoveCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    public interface IPlayerActionMapActions
    {
        void OnMapAction(InputAction.CallbackContext context);
        void OnDestinationAction(InputAction.CallbackContext context);
        void OnVendorAction(InputAction.CallbackContext context);
        void OnRotateLeftAction(InputAction.CallbackContext context);
        void OnRotateRightAction(InputAction.CallbackContext context);
        void OnMirrorAction(InputAction.CallbackContext context);
    }
}
